{"version":3,"sources":["components/Note.js","services/note.js","services/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportant","lable","important","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","className","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errMessage","setErrMessage","useEffect","console","log","noteServices","initialNote","notesShow","filter","map","find","changeNote","catch","error","setTimeout","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAceA,EAZF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,gBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,8BACE,+BACGH,EAAKI,QACN,wBAAQC,QAAWJ,EAAnB,SAAqCC,U,gBCPvCI,EAAU,kCAkBD,EAhBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAc9B,EAXA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAS9B,EANA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SCH9BK,G,MAXM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAe,OAAZA,EACQ,KAGP,qBAAKC,UAAY,QAAjB,SACKD,MCyHEE,EA1HH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,iBAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,qBAHd,mBAGTK,EAHS,KAGAC,EAHA,OAImBN,mBAAS,oBAJ5B,mBAITO,EAJS,KAIEC,EAJF,KAOhBC,qBAAU,WACRC,QAAQC,IAAI,UAYZC,IAAsBvB,MAAK,SAACwB,GAC1BX,EAASW,QAEV,IAEH,IA2BMC,EAAYT,EACdJ,EACAA,EAAMc,QAAO,SAACnC,GAAD,OAA6B,IAAnBA,EAAKG,aAsChC,OACE,gCAEE,uCACA,cAAC,EAAD,CAAcc,QAAWU,IACzB,yBAAQtB,QAAS,kBAAMqB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,SAGhC,6BACGS,GACCA,EAAUE,KAAI,SAACpC,GAAD,OACZ,cAAC,EAAD,CAEEA,KAAMA,EACNC,gBAAiB,YA9CL,SAACa,GAGvB,IAAMd,EAAOqB,EAAMgB,MAAK,SAACrC,GAAD,OAAUA,EAAKc,KAAOA,KACxCwB,EAAU,2BAAQtC,GAAR,IAAcG,WAAYH,EAAKG,YAQ/C6B,EACUlB,EAAIwB,GACX7B,MAAK,SAACwB,GACLX,EAASD,EAAMe,KAAI,SAACpC,GAAD,OAAWA,EAAKc,KAAOA,EAAKd,EAAOiC,SAEvDM,OAAM,SAACC,GACNZ,EAAc,aAAD,OAAc5B,EAAKI,QAAnB,sCAEbqC,YAAW,WACTb,EAAc,QACb,KACHN,GAAS,kBAAMtB,EAAKmC,QAAO,SAACnC,GAAD,OAAUA,EAAKc,KAAOA,WAwBzCb,CAAgBD,EAAKc,MAHlBd,EAAKc,SASlB,uBAAM4B,SAzFM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBzC,QAASmB,EACTuB,MAAM,IAAIC,MAAOC,cACjB7C,UAAW8C,KAAKC,SAAW,IAgB7BlB,EAAoBa,GAAYpC,MAAK,SAACwB,GACpCX,EAASD,EAAM8B,OAAOlB,IACtBT,EAAW,QAkEX,UACE,uBAAO4B,MAAO7B,EAAS8B,SA5DJ,SAACV,GAExBb,QAAQC,IAAIY,EAAMW,OAAOF,OACzB5B,EAAWmB,EAAMW,OAAOF,UA0DpB,wBAAQG,KAAK,SAAb,yBCrHRC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.70ac269b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportant }) => {\n  const lable = note.important ? 'make not important' : 'make important'\n  return (\n    <div>\n      <li>\n        {note.content}\n        <button onClick = {toggleImportant}>{lable}</button>\n      </li>\n    </div>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\nconst baseUrl = \"http://localhost:3002/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl); //promise赋值为request\n  return request.then((response) => response.data); //.then()方法返回的仍然是promise\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  getAll,\n  create,\n  update,\n};\n","import '../App.css'\nconst Notification = ({message}) => {\n    if(message === null){\n        return null;\n    }\n    return (\n        <div className = 'error'>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\n//import axios from \"axios\";\nimport noteServices from \"./services/note\";\nimport Notification from './services/Notification'\nimport './App.css'\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note...\");\n  const [showAll, setShowAll] = useState();\n  const [errMessage,setErrMessage] = useState('have a error ...')\n  //const url = \"http://localhost:3001/notes\";\n\n  useEffect(() => {\n    console.log(\"effect\");\n    // 一；  axios\n    //     .get(url).then((response) => {\n    //     console.log(\"promised fulfilles\");\n    //     setNotes(response.data);\n    //     console.log(response);\n    //   });\n\n    // 二： noteServices.getAll().then((response) => {\n    //   setNotes(response.data);\n    // });\n\n    noteServices.getAll().then((initialNote) => {\n      setNotes(initialNote);\n    });\n  }, []); //第二个参数的[],代表只在第一次渲染时执行\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      //id: notes.length + 1,\n    };\n    // setNotes(notes.concat(noteObject)); //将新添加的noteobject添加到notes，concat创建一个副本，不会直接改变原数组\n    // setNewNote(\"\");\n\n    // axios.post(url, noteObject).then((response) => {\n    //   setNotes(notes.concat(response.data));\n    //   setNewNote(\"\");\n    // });\n\n    // noteServices.create(noteObject).then((response) => {\n    //   setNotes(notes.concat(response.data));\n    //   setNewNote(\"\");\n    // });\n\n    noteServices.create(noteObject).then((initialNote) => {\n      setNotes(notes.concat(initialNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const notesShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n  const handleNoteChange = (event) => {\n    //记录下来表单输入的内容\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportant = (id) => {\n    //const url2 = `${url}/${id}`;\n\n    const note = notes.find((note) => note.id === id);\n    const changeNote = { ...note, important: !note.important };\n\n    // axios.put(url2, changeNote).then((response) => {\n    //   setNotes(notes.map((note) => (note.id !== id ? note : response.data)));\n    // });\n    // noteServices.update(id, changeNote).then((response) => {\n    //   setNotes(notes.map((note) => (note.id !== id ? note : response.data)));\n    // });\n    noteServices\n      .update(id, changeNote)\n      .then((initialNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : initialNote)));\n      })\n      .catch((error) => {\n        setErrMessage(`the note '${note.content}' was already deleted from server`);\n\n        setTimeout(() => {\n          setErrMessage(null)\n        }, 5000);\n        setNotes(() => note.filter((note) => note.id !== id));\n      });\n  };\n\n  // const notedelete = id => {\n  //   const note = notes.find(note => note.id === id)\n  // }\n \n  return (\n    <div> \n\n      <h1>Notes</h1>\n      <Notification message = {errMessage}/>\n      <button onClick={() => setShowAll(!showAll)}>\n        show {showAll ? \"important\" : \"all\"}\n      </button>\n      {/* <Notification message = {errMessage}/> */}\n      <ul>\n        {notesShow &&\n          notesShow.map((note) => (\n            <Note\n              key={note.id}\n              note={note}\n              toggleImportant={() => {\n                toggleImportant(note.id);\n              }}\n            />\n          ))}\n         \n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}